// Generated by commsdsl2comms v6.3.4

/// @file
/// @brief Contains definition of <b>""</b> field.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_mqtt5/field/BinData.h"
#include "cc_mqtt5/field/EnableEnum.h"
#include "cc_mqtt5/field/FieldBase.h"
#include "cc_mqtt5/field/PropertyCommon.h"
#include "cc_mqtt5/field/Qos.h"
#include "cc_mqtt5/field/String.h"
#include "cc_mqtt5/field/VarLenInt.h"
#include "cc_mqtt5/options/DefaultOptions.h"
#include "comms/Assert.h"
#include "comms/CompileControl.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/field/Variant.h"
#include "comms/options.h"

namespace cc_mqtt5
{

namespace field
{

/// @brief Scope for all the member fields of
///     @ref Property field.
/// @tparam TOpt Protocol options.
template <typename TOpt = cc_mqtt5::options::DefaultOptions>
struct PropertyMembers
{
    /// @brief Scope for all the member fields of
    ///     @ref PayloadFormatIndicator field.
    struct PayloadFormatIndicatorMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<1>,
                    comms::option::def::ValidNumValue<1>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        /// @see @ref cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::ValueType
        class Value : public
            comms::field::EnumValue<
                cc_mqtt5::field::FieldBase<>,
                cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_mqtt5::field::FieldBase<>,
                    cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 1>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Property Format Indicator"</b> field.
    class PayloadFormatIndicator : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename PayloadFormatIndicatorMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename PayloadFormatIndicatorMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::PayloadFormatIndicatorMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::PayloadFormatIndicatorMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::PayloadFormatIndicatorCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MessageExpiryInterval field.
    struct MessageExpiryIntervalMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<2>,
                comms::option::def::ValidNumValue<2>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<2>,
                    comms::option::def::ValidNumValue<2>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MessageExpiryIntervalMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MessageExpiryIntervalMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(2);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MessageExpiryIntervalMembersCommon::ValueCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MessageExpiryIntervalMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Message Expiry Interval"</b> field.
    class MessageExpiryInterval : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename MessageExpiryIntervalMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename MessageExpiryIntervalMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::MessageExpiryIntervalMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::MessageExpiryIntervalMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::MessageExpiryIntervalCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ContentType field.
    struct ContentTypeMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<3>,
                comms::option::def::ValidNumValue<3>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<3>,
                    comms::option::def::ValidNumValue<3>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ContentTypeMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ContentTypeMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(3);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::String<
                TOpt,
                typename TOpt::field::PropertyMembers::ContentTypeMembers::Value
            >
        {
            using Base =
                cc_mqtt5::field::String<
                    TOpt,
                    typename TOpt::field::PropertyMembers::ContentTypeMembers::Value
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ContentTypeMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Content Type"</b> field.
    class ContentType : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename ContentTypeMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename ContentTypeMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ContentTypeMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ContentTypeMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::ContentTypeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ResponseTopic field.
    struct ResponseTopicMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<8>,
                comms::option::def::ValidNumValue<8>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<8>,
                    comms::option::def::ValidNumValue<8>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ResponseTopicMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ResponseTopicMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(8);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::String<
                TOpt,
                typename TOpt::field::PropertyMembers::ResponseTopicMembers::Value
            >
        {
            using Base =
                cc_mqtt5::field::String<
                    TOpt,
                    typename TOpt::field::PropertyMembers::ResponseTopicMembers::Value
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ResponseTopicMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Response Topic"</b> field.
    class ResponseTopic : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename ResponseTopicMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename ResponseTopicMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ResponseTopicMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ResponseTopicMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::ResponseTopicCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref CorrelationData field.
    struct CorrelationDataMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<9>,
                comms::option::def::ValidNumValue<9>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<9>,
                    comms::option::def::ValidNumValue<9>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::CorrelationDataMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::CorrelationDataMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(9);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::BinData<
                TOpt,
                typename TOpt::field::PropertyMembers::CorrelationDataMembers::Value
            >
        {
            using Base =
                cc_mqtt5::field::BinData<
                    TOpt,
                    typename TOpt::field::PropertyMembers::CorrelationDataMembers::Value
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::CorrelationDataMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Correlation Data"</b> field.
    class CorrelationData : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename CorrelationDataMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename CorrelationDataMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::CorrelationDataMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::CorrelationDataMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::CorrelationDataCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SubscriptionId field.
    struct SubscriptionIdMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<11>,
                comms::option::def::ValidNumValue<11>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<11>,
                    comms::option::def::ValidNumValue<11>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SubscriptionIdMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SubscriptionIdMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(11);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::VarLenInt<
                TOpt
            >
        {
            using Base =
                cc_mqtt5::field::VarLenInt<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SubscriptionIdMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Subscription ID"</b> field.
    class SubscriptionId : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename SubscriptionIdMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename SubscriptionIdMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::SubscriptionIdMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::SubscriptionIdMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::SubscriptionIdCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SessionExpiryInterval field.
    struct SessionExpiryIntervalMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<17>,
                comms::option::def::ValidNumValue<17>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<17>,
                    comms::option::def::ValidNumValue<17>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SessionExpiryIntervalMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SessionExpiryIntervalMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(17);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single special value name info entry.
            using SpecialNameInfo = cc_mqtt5::field::PropertyMembersCommon::SessionExpiryIntervalMembersCommon::ValueCommon::SpecialNameInfo;

            /// @brief Type returned from @ref specialNamesMap() member function.
            /// @details The @b first value of the pair is pointer to the map array,
            ///     The @b second value of the pair is the size of the array.
            using SpecialNamesMapInfo = cc_mqtt5::field::PropertyMembersCommon::SessionExpiryIntervalMembersCommon::ValueCommon::SpecialNamesMapInfo;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SessionExpiryIntervalMembersCommon::ValueCommon::hasSpecials();
            }

            /// @brief Special value <b>"Infinite"</b>.
            /// @see @ref cc_mqtt5::field::PropertyMembersCommon::SessionExpiryIntervalMembersCommon::ValueCommon::valueInfinite().
            static constexpr ValueType valueInfinite()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SessionExpiryIntervalMembersCommon::ValueCommon::valueInfinite();
            }

            /// @brief Check the value is equal to special @ref valueInfinite().
            bool isInfinite() const
            {
                return Base::getValue() == valueInfinite();
            }

            /// @brief Assign special value @ref valueInfinite() to the field.
            void setInfinite()
            {
                Base::setValue(valueInfinite());
            }

            /// @brief Retrieve map of special value names
            static SpecialNamesMapInfo specialNamesMap()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SessionExpiryIntervalMembersCommon::ValueCommon::specialNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SessionExpiryIntervalMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Session Expiry Interval"</b> field.
    class SessionExpiryInterval : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename SessionExpiryIntervalMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename SessionExpiryIntervalMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::SessionExpiryIntervalMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::SessionExpiryIntervalMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::SessionExpiryIntervalCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref AssignedClientId field.
    struct AssignedClientIdMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<18>,
                comms::option::def::ValidNumValue<18>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<18>,
                    comms::option::def::ValidNumValue<18>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::AssignedClientIdMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::AssignedClientIdMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(18);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::String<
                TOpt,
                typename TOpt::field::PropertyMembers::AssignedClientIdMembers::Value
            >
        {
            using Base =
                cc_mqtt5::field::String<
                    TOpt,
                    typename TOpt::field::PropertyMembers::AssignedClientIdMembers::Value
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::AssignedClientIdMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Assigned Client ID"</b> field.
    class AssignedClientId : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename AssignedClientIdMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename AssignedClientIdMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::AssignedClientIdMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::AssignedClientIdMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::AssignedClientIdCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ServerKeepAlive field.
    struct ServerKeepAliveMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<19>,
                comms::option::def::ValidNumValue<19>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<19>,
                    comms::option::def::ValidNumValue<19>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ServerKeepAliveMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ServerKeepAliveMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(19);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ServerKeepAliveMembersCommon::ValueCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ServerKeepAliveMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Server Keep Alive"</b> field.
    class ServerKeepAlive : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename ServerKeepAliveMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename ServerKeepAliveMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ServerKeepAliveMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ServerKeepAliveMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::ServerKeepAliveCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref AuthMethod field.
    struct AuthMethodMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<21>,
                comms::option::def::ValidNumValue<21>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<21>,
                    comms::option::def::ValidNumValue<21>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::AuthMethodMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::AuthMethodMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(21);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::String<
                TOpt,
                typename TOpt::field::PropertyMembers::AuthMethodMembers::Value
            >
        {
            using Base =
                cc_mqtt5::field::String<
                    TOpt,
                    typename TOpt::field::PropertyMembers::AuthMethodMembers::Value
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::AuthMethodMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Authentication Method"</b> field.
    class AuthMethod : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename AuthMethodMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename AuthMethodMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::AuthMethodMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::AuthMethodMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::AuthMethodCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref AuthData field.
    struct AuthDataMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<22>,
                comms::option::def::ValidNumValue<22>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<22>,
                    comms::option::def::ValidNumValue<22>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::AuthDataMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::AuthDataMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(22);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::BinData<
                TOpt,
                typename TOpt::field::PropertyMembers::AuthDataMembers::Value
            >
        {
            using Base =
                cc_mqtt5::field::BinData<
                    TOpt,
                    typename TOpt::field::PropertyMembers::AuthDataMembers::Value
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::AuthDataMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Authentication Data"</b> field.
    class AuthData : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename AuthDataMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename AuthDataMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::AuthDataMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::AuthDataMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::AuthDataCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RequestProblemInfo field.
    struct RequestProblemInfoMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<23>,
                comms::option::def::ValidNumValue<23>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<23>,
                    comms::option::def::ValidNumValue<23>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::RequestProblemInfoMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::RequestProblemInfoMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(23);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::EnableEnum<
                TOpt
            >
        {
            using Base =
                cc_mqtt5::field::EnableEnum<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::RequestProblemInfoMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Request Problem Information"</b> field.
    class RequestProblemInfo : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename RequestProblemInfoMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename RequestProblemInfoMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::RequestProblemInfoMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::RequestProblemInfoMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::RequestProblemInfoCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref WillDelayInterval field.
    struct WillDelayIntervalMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<24>,
                comms::option::def::ValidNumValue<24>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<24>,
                    comms::option::def::ValidNumValue<24>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::WillDelayIntervalMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::WillDelayIntervalMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(24);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::WillDelayIntervalMembersCommon::ValueCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::WillDelayIntervalMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Will Delay Interval"</b> field.
    class WillDelayInterval : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename WillDelayIntervalMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename WillDelayIntervalMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::WillDelayIntervalMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::WillDelayIntervalMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::WillDelayIntervalCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RequestResponseInfo field.
    struct RequestResponseInfoMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<25>,
                comms::option::def::ValidNumValue<25>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<25>,
                    comms::option::def::ValidNumValue<25>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::RequestResponseInfoMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::RequestResponseInfoMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(25);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::EnableEnum<
                TOpt
            >
        {
            using Base =
                cc_mqtt5::field::EnableEnum<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::RequestResponseInfoMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Request Response Information"</b> field.
    class RequestResponseInfo : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename RequestResponseInfoMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename RequestResponseInfoMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::RequestResponseInfoMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::RequestResponseInfoMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::RequestResponseInfoCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ResponseInfo field.
    struct ResponseInfoMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<26>,
                comms::option::def::ValidNumValue<26>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<26>,
                    comms::option::def::ValidNumValue<26>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ResponseInfoMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ResponseInfoMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(26);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::String<
                TOpt,
                typename TOpt::field::PropertyMembers::ResponseInfoMembers::Value
            >
        {
            using Base =
                cc_mqtt5::field::String<
                    TOpt,
                    typename TOpt::field::PropertyMembers::ResponseInfoMembers::Value
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ResponseInfoMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Response Information"</b> field.
    class ResponseInfo : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename ResponseInfoMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename ResponseInfoMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ResponseInfoMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ResponseInfoMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::ResponseInfoCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ServerRef field.
    struct ServerRefMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<28>,
                comms::option::def::ValidNumValue<28>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<28>,
                    comms::option::def::ValidNumValue<28>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ServerRefMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ServerRefMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(28);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::String<
                TOpt,
                typename TOpt::field::PropertyMembers::ServerRefMembers::Value
            >
        {
            using Base =
                cc_mqtt5::field::String<
                    TOpt,
                    typename TOpt::field::PropertyMembers::ServerRefMembers::Value
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ServerRefMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Server Reference"</b> field.
    class ServerRef : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename ServerRefMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename ServerRefMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ServerRefMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ServerRefMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::ServerRefCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ReasonStr field.
    struct ReasonStrMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<31>,
                comms::option::def::ValidNumValue<31>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<31>,
                    comms::option::def::ValidNumValue<31>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ReasonStrMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ReasonStrMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(31);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::String<
                TOpt,
                typename TOpt::field::PropertyMembers::ReasonStrMembers::Value
            >
        {
            using Base =
                cc_mqtt5::field::String<
                    TOpt,
                    typename TOpt::field::PropertyMembers::ReasonStrMembers::Value
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ReasonStrMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Reason String"</b> field.
    class ReasonStr : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename ReasonStrMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename ReasonStrMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ReasonStrMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ReasonStrMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::ReasonStrCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ReceiveMax field.
    struct ReceiveMaxMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<33>,
                comms::option::def::ValidNumValue<33>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<33>,
                    comms::option::def::ValidNumValue<33>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ReceiveMaxMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ReceiveMaxMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(33);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::DefaultNumValue<65535L>,
                comms::option::def::ValidNumValueRange<1, 65535L>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::DefaultNumValue<65535L>,
                    comms::option::def::ValidNumValueRange<1, 65535L>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ReceiveMaxMembersCommon::ValueCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::ReceiveMaxMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Receive Maximum"</b> field.
    class ReceiveMax : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename ReceiveMaxMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename ReceiveMaxMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ReceiveMaxMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::ReceiveMaxMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::ReceiveMaxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TopicAliasMax field.
    struct TopicAliasMaxMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<34>,
                comms::option::def::ValidNumValue<34>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<34>,
                    comms::option::def::ValidNumValue<34>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::TopicAliasMaxMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::TopicAliasMaxMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(34);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<>,
                std::uint16_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<>,
                    std::uint16_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::TopicAliasMaxMembersCommon::ValueCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::TopicAliasMaxMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Topic Alias Maximum"</b> field.
    class TopicAliasMax : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename TopicAliasMaxMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename TopicAliasMaxMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::TopicAliasMaxMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::TopicAliasMaxMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::TopicAliasMaxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TopicAlias field.
    struct TopicAliasMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<35>,
                comms::option::def::ValidNumValue<35>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<35>,
                    comms::option::def::ValidNumValue<35>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::TopicAliasMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::TopicAliasMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(35);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<>,
                std::uint16_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<>,
                    std::uint16_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::TopicAliasMembersCommon::ValueCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::TopicAliasMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Topic Alias"</b> field.
    class TopicAlias : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename TopicAliasMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename TopicAliasMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::TopicAliasMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::TopicAliasMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::TopicAliasCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MaxQos field.
    struct MaxQosMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<36>,
                comms::option::def::ValidNumValue<36>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<36>,
                    comms::option::def::ValidNumValue<36>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MaxQosMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MaxQosMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(36);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::Qos<
                TOpt
            >
        {
            using Base =
                cc_mqtt5::field::Qos<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MaxQosMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Maximum QoS"</b> field.
    class MaxQos : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename MaxQosMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename MaxQosMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::MaxQosMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::MaxQosMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::MaxQosCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RetainAvailable field.
    struct RetainAvailableMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<37>,
                comms::option::def::ValidNumValue<37>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<37>,
                    comms::option::def::ValidNumValue<37>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::RetainAvailableMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::RetainAvailableMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(37);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::EnableEnum<
                TOpt
            >
        {
            using Base =
                cc_mqtt5::field::EnableEnum<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::RetainAvailableMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Retain Available"</b> field.
    class RetainAvailable : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename RetainAvailableMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename RetainAvailableMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::RetainAvailableMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::RetainAvailableMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::RetainAvailableCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UserProperty field.
    struct UserPropertyMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<38>,
                comms::option::def::ValidNumValue<38>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<38>,
                    comms::option::def::ValidNumValue<38>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::UserPropertyMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::UserPropertyMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(38);
                return true;
            }
        };

        /// @brief Scope for all the member fields of
        ///     @ref Value field.
        struct ValueMembers
        {
            /// @brief Definition of <b>"First"</b> field.
            class First : public
                cc_mqtt5::field::String<
                    TOpt,
                    typename TOpt::field::PropertyMembers::UserPropertyMembers::ValueMembers::First
                >
            {
                using Base =
                    cc_mqtt5::field::String<
                        TOpt,
                        typename TOpt::field::PropertyMembers::UserPropertyMembers::ValueMembers::First
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_mqtt5::field::PropertyMembersCommon::UserPropertyMembersCommon::ValueMembersCommon::FirstCommon::name();
                }
            };

            /// @brief Definition of <b>"Second"</b> field.
            class Second : public
                cc_mqtt5::field::String<
                    TOpt,
                    typename TOpt::field::PropertyMembers::UserPropertyMembers::ValueMembers::Second
                >
            {
                using Base =
                    cc_mqtt5::field::String<
                        TOpt,
                        typename TOpt::field::PropertyMembers::UserPropertyMembers::ValueMembers::Second
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_mqtt5::field::PropertyMembersCommon::UserPropertyMembersCommon::ValueMembersCommon::SecondCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   First,
                   Second
                >;
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename ValueMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_mqtt5::field::FieldBase<>,
                    typename ValueMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_first index, @b Field_first type and @b field_first() access function -
            ///         for cc_mqtt5::field::PropertyMembers::UserPropertyMembers::ValueMembers::First member field.
            ///     @li @b FieldIdx_second index, @b Field_second type and @b field_second() access function -
            ///         for cc_mqtt5::field::PropertyMembers::UserPropertyMembers::ValueMembers::Second member field.
            COMMS_FIELD_MEMBERS_NAMES(
                first,
                second
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::UserPropertyMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"User Property"</b> field.
    class UserProperty : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename UserPropertyMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename UserPropertyMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::UserPropertyMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::UserPropertyMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::UserPropertyCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MaxPacketSize field.
    struct MaxPacketSizeMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<39>,
                comms::option::def::ValidNumValue<39>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<39>,
                    comms::option::def::ValidNumValue<39>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MaxPacketSizeMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MaxPacketSizeMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(39);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<>,
                std::uint32_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<>,
                    std::uint32_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MaxPacketSizeMembersCommon::ValueCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::MaxPacketSizeMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Maximum Packet Size"</b> field.
    class MaxPacketSize : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename MaxPacketSizeMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename MaxPacketSizeMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::MaxPacketSizeMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::MaxPacketSizeMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::MaxPacketSizeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref WildcardSubAvail field.
    struct WildcardSubAvailMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<40>,
                comms::option::def::ValidNumValue<40>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<40>,
                    comms::option::def::ValidNumValue<40>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::WildcardSubAvailMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::WildcardSubAvailMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(40);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::EnableEnum<
                TOpt
            >
        {
            using Base =
                cc_mqtt5::field::EnableEnum<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::WildcardSubAvailMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Wildcard Subscription Available"</b> field.
    class WildcardSubAvail : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename WildcardSubAvailMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename WildcardSubAvailMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::WildcardSubAvailMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::WildcardSubAvailMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::WildcardSubAvailCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SubIdAvail field.
    struct SubIdAvailMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<41>,
                comms::option::def::ValidNumValue<41>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<41>,
                    comms::option::def::ValidNumValue<41>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SubIdAvailMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SubIdAvailMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(41);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::EnableEnum<
                TOpt
            >
        {
            using Base =
                cc_mqtt5::field::EnableEnum<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SubIdAvailMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Subscription ID Available"</b> field.
    class SubIdAvail : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename SubIdAvailMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename SubIdAvailMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::SubIdAvailMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::SubIdAvailMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::SubIdAvailCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SharedSubAvail field.
    struct SharedSubAvailMembers
    {
        /// @brief Definition of <b>"Id"</b> field.
        class Id : public
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::DefaultNumValue<42>,
                comms::option::def::ValidNumValue<42>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::VarLength<1U, 4U>,
                    comms::option::def::DefaultNumValue<42>,
                    comms::option::def::ValidNumValue<42>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SharedSubAvailMembersCommon::IdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SharedSubAvailMembersCommon::IdCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(42);
                return true;
            }
        };

        /// @brief Definition of <b>"Value"</b> field.
        class Value : public
            cc_mqtt5::field::EnableEnum<
                TOpt
            >
        {
            using Base =
                cc_mqtt5::field::EnableEnum<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_mqtt5::field::PropertyMembersCommon::SharedSubAvailMembersCommon::ValueCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Id,
               Value
            >;
    };

    /// @brief Definition of <b>"Shared Subscription Available"</b> field.
    class SharedSubAvail : public
        comms::field::Bundle<
            cc_mqtt5::field::FieldBase<>,
            typename SharedSubAvailMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bundle<
                cc_mqtt5::field::FieldBase<>,
                typename SharedSubAvailMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
        ///         for cc_mqtt5::field::PropertyMembers::SharedSubAvailMembers::Id member field.
        ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
        ///         for cc_mqtt5::field::PropertyMembers::SharedSubAvailMembers::Value member field.
        COMMS_FIELD_MEMBERS_NAMES(
            id,
            value
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_mqtt5::field::PropertyMembersCommon::SharedSubAvailCommon::name();
        }
    };

    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           PayloadFormatIndicator,
           MessageExpiryInterval,
           ContentType,
           ResponseTopic,
           CorrelationData,
           SubscriptionId,
           SessionExpiryInterval,
           AssignedClientId,
           ServerKeepAlive,
           AuthMethod,
           AuthData,
           RequestProblemInfo,
           WillDelayInterval,
           RequestResponseInfo,
           ResponseInfo,
           ServerRef,
           ReasonStr,
           ReceiveMax,
           TopicAliasMax,
           TopicAlias,
           MaxQos,
           RetainAvailable,
           UserProperty,
           MaxPacketSize,
           WildcardSubAvail,
           SubIdAvail,
           SharedSubAvail
        >;
};

/// @brief Definition of <b>""</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = cc_mqtt5::options::DefaultOptions, typename... TExtraOpts>
class Property : public
    comms::field::Variant<
        cc_mqtt5::field::FieldBase<>,
        typename PropertyMembers<TOpt>::All,
        TExtraOpts...,
        comms::option::def::HasCustomRead,
        comms::option::def::HasCustomWrite,
        comms::option::def::HasCustomRefresh,
        comms::option::def::VariantHasCustomResetOnDestruct,
        comms::option::def::HasVersionDependentMembers<false>
    >
{
    using Base =
        comms::field::Variant<
            cc_mqtt5::field::FieldBase<>,
            typename PropertyMembers<TOpt>::All,
            TExtraOpts...,
            comms::option::def::HasCustomRead,
            comms::option::def::HasCustomWrite,
            comms::option::def::HasCustomRefresh,
            comms::option::def::VariantHasCustomResetOnDestruct,
            comms::option::def::HasVersionDependentMembers<false>
        >;
public:
    /// @brief Default constructor.
    Property() = default;

    /// @brief Destructor
    ~Property()
    {
        reset();
    }

    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_VARIANT_MEMBERS_NAMES macro
    ///     related to @b comms::field::Variant class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_payloadFormatIndicator index, @b Field_payloadFormatIndicator type,
    ///         @b initField_payloadFormatIndicator(), @b deinitField_payloadFormatIndicator() and @b accessField_payloadFormatIndicator() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::PayloadFormatIndicator member field.
    ///     @li @b FieldIdx_messageExpiryInterval index, @b Field_messageExpiryInterval type,
    ///         @b initField_messageExpiryInterval(), @b deinitField_messageExpiryInterval() and @b accessField_messageExpiryInterval() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::MessageExpiryInterval member field.
    ///     @li @b FieldIdx_contentType index, @b Field_contentType type,
    ///         @b initField_contentType(), @b deinitField_contentType() and @b accessField_contentType() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::ContentType member field.
    ///     @li @b FieldIdx_responseTopic index, @b Field_responseTopic type,
    ///         @b initField_responseTopic(), @b deinitField_responseTopic() and @b accessField_responseTopic() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::ResponseTopic member field.
    ///     @li @b FieldIdx_correlationData index, @b Field_correlationData type,
    ///         @b initField_correlationData(), @b deinitField_correlationData() and @b accessField_correlationData() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::CorrelationData member field.
    ///     @li @b FieldIdx_subscriptionId index, @b Field_subscriptionId type,
    ///         @b initField_subscriptionId(), @b deinitField_subscriptionId() and @b accessField_subscriptionId() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::SubscriptionId member field.
    ///     @li @b FieldIdx_sessionExpiryInterval index, @b Field_sessionExpiryInterval type,
    ///         @b initField_sessionExpiryInterval(), @b deinitField_sessionExpiryInterval() and @b accessField_sessionExpiryInterval() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::SessionExpiryInterval member field.
    ///     @li @b FieldIdx_assignedClientId index, @b Field_assignedClientId type,
    ///         @b initField_assignedClientId(), @b deinitField_assignedClientId() and @b accessField_assignedClientId() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::AssignedClientId member field.
    ///     @li @b FieldIdx_serverKeepAlive index, @b Field_serverKeepAlive type,
    ///         @b initField_serverKeepAlive(), @b deinitField_serverKeepAlive() and @b accessField_serverKeepAlive() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::ServerKeepAlive member field.
    ///     @li @b FieldIdx_authMethod index, @b Field_authMethod type,
    ///         @b initField_authMethod(), @b deinitField_authMethod() and @b accessField_authMethod() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::AuthMethod member field.
    ///     @li @b FieldIdx_authData index, @b Field_authData type,
    ///         @b initField_authData(), @b deinitField_authData() and @b accessField_authData() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::AuthData member field.
    ///     @li @b FieldIdx_requestProblemInfo index, @b Field_requestProblemInfo type,
    ///         @b initField_requestProblemInfo(), @b deinitField_requestProblemInfo() and @b accessField_requestProblemInfo() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::RequestProblemInfo member field.
    ///     @li @b FieldIdx_willDelayInterval index, @b Field_willDelayInterval type,
    ///         @b initField_willDelayInterval(), @b deinitField_willDelayInterval() and @b accessField_willDelayInterval() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::WillDelayInterval member field.
    ///     @li @b FieldIdx_requestResponseInfo index, @b Field_requestResponseInfo type,
    ///         @b initField_requestResponseInfo(), @b deinitField_requestResponseInfo() and @b accessField_requestResponseInfo() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::RequestResponseInfo member field.
    ///     @li @b FieldIdx_responseInfo index, @b Field_responseInfo type,
    ///         @b initField_responseInfo(), @b deinitField_responseInfo() and @b accessField_responseInfo() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::ResponseInfo member field.
    ///     @li @b FieldIdx_serverRef index, @b Field_serverRef type,
    ///         @b initField_serverRef(), @b deinitField_serverRef() and @b accessField_serverRef() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::ServerRef member field.
    ///     @li @b FieldIdx_reasonStr index, @b Field_reasonStr type,
    ///         @b initField_reasonStr(), @b deinitField_reasonStr() and @b accessField_reasonStr() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::ReasonStr member field.
    ///     @li @b FieldIdx_receiveMax index, @b Field_receiveMax type,
    ///         @b initField_receiveMax(), @b deinitField_receiveMax() and @b accessField_receiveMax() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::ReceiveMax member field.
    ///     @li @b FieldIdx_topicAliasMax index, @b Field_topicAliasMax type,
    ///         @b initField_topicAliasMax(), @b deinitField_topicAliasMax() and @b accessField_topicAliasMax() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::TopicAliasMax member field.
    ///     @li @b FieldIdx_topicAlias index, @b Field_topicAlias type,
    ///         @b initField_topicAlias(), @b deinitField_topicAlias() and @b accessField_topicAlias() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::TopicAlias member field.
    ///     @li @b FieldIdx_maxQos index, @b Field_maxQos type,
    ///         @b initField_maxQos(), @b deinitField_maxQos() and @b accessField_maxQos() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::MaxQos member field.
    ///     @li @b FieldIdx_retainAvailable index, @b Field_retainAvailable type,
    ///         @b initField_retainAvailable(), @b deinitField_retainAvailable() and @b accessField_retainAvailable() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::RetainAvailable member field.
    ///     @li @b FieldIdx_userProperty index, @b Field_userProperty type,
    ///         @b initField_userProperty(), @b deinitField_userProperty() and @b accessField_userProperty() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::UserProperty member field.
    ///     @li @b FieldIdx_maxPacketSize index, @b Field_maxPacketSize type,
    ///         @b initField_maxPacketSize(), @b deinitField_maxPacketSize() and @b accessField_maxPacketSize() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::MaxPacketSize member field.
    ///     @li @b FieldIdx_wildcardSubAvail index, @b Field_wildcardSubAvail type,
    ///         @b initField_wildcardSubAvail(), @b deinitField_wildcardSubAvail() and @b accessField_wildcardSubAvail() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::WildcardSubAvail member field.
    ///     @li @b FieldIdx_subIdAvail index, @b Field_subIdAvail type,
    ///         @b initField_subIdAvail(), @b deinitField_subIdAvail() and @b accessField_subIdAvail() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::SubIdAvail member field.
    ///     @li @b FieldIdx_sharedSubAvail index, @b Field_sharedSubAvail type,
    ///         @b initField_sharedSubAvail(), @b deinitField_sharedSubAvail() and @b accessField_sharedSubAvail() access functions -
    ///         for cc_mqtt5::field::PropertyMembers::SharedSubAvail member field.
    COMMS_VARIANT_MEMBERS_NAMES(
        payloadFormatIndicator,
        messageExpiryInterval,
        contentType,
        responseTopic,
        correlationData,
        subscriptionId,
        sessionExpiryInterval,
        assignedClientId,
        serverKeepAlive,
        authMethod,
        authData,
        requestProblemInfo,
        willDelayInterval,
        requestResponseInfo,
        responseInfo,
        serverRef,
        reasonStr,
        receiveMax,
        topicAliasMax,
        topicAlias,
        maxQos,
        retainAvailable,
        userProperty,
        maxPacketSize,
        wildcardSubAvail,
        subIdAvail,
        sharedSubAvail
    );

    /// @brief Copy constructor.
    Property(const Property& other) :
        Base()
    {
        *this = other;
    }

    /// @brief Move constructor.
    Property(Property&& other) : 
        Base()
    {
        *this = std::move(other);
    }

    /// @brief Copy assignment operator.
    Property& operator=(const Property& other)
    {
        if (this == &other) {
            return *this;
        }

        reset();

        if (!other.currentFieldValid()) {
            return *this;
        }

        switch (other.currentField()) {
            case FieldIdx_payloadFormatIndicator: initField_payloadFormatIndicator() = other.accessField_payloadFormatIndicator(); return *this;
            case FieldIdx_messageExpiryInterval: initField_messageExpiryInterval() = other.accessField_messageExpiryInterval(); return *this;
            case FieldIdx_contentType: initField_contentType() = other.accessField_contentType(); return *this;
            case FieldIdx_responseTopic: initField_responseTopic() = other.accessField_responseTopic(); return *this;
            case FieldIdx_correlationData: initField_correlationData() = other.accessField_correlationData(); return *this;
            case FieldIdx_subscriptionId: initField_subscriptionId() = other.accessField_subscriptionId(); return *this;
            case FieldIdx_sessionExpiryInterval: initField_sessionExpiryInterval() = other.accessField_sessionExpiryInterval(); return *this;
            case FieldIdx_assignedClientId: initField_assignedClientId() = other.accessField_assignedClientId(); return *this;
            case FieldIdx_serverKeepAlive: initField_serverKeepAlive() = other.accessField_serverKeepAlive(); return *this;
            case FieldIdx_authMethod: initField_authMethod() = other.accessField_authMethod(); return *this;
            case FieldIdx_authData: initField_authData() = other.accessField_authData(); return *this;
            case FieldIdx_requestProblemInfo: initField_requestProblemInfo() = other.accessField_requestProblemInfo(); return *this;
            case FieldIdx_willDelayInterval: initField_willDelayInterval() = other.accessField_willDelayInterval(); return *this;
            case FieldIdx_requestResponseInfo: initField_requestResponseInfo() = other.accessField_requestResponseInfo(); return *this;
            case FieldIdx_responseInfo: initField_responseInfo() = other.accessField_responseInfo(); return *this;
            case FieldIdx_serverRef: initField_serverRef() = other.accessField_serverRef(); return *this;
            case FieldIdx_reasonStr: initField_reasonStr() = other.accessField_reasonStr(); return *this;
            case FieldIdx_receiveMax: initField_receiveMax() = other.accessField_receiveMax(); return *this;
            case FieldIdx_topicAliasMax: initField_topicAliasMax() = other.accessField_topicAliasMax(); return *this;
            case FieldIdx_topicAlias: initField_topicAlias() = other.accessField_topicAlias(); return *this;
            case FieldIdx_maxQos: initField_maxQos() = other.accessField_maxQos(); return *this;
            case FieldIdx_retainAvailable: initField_retainAvailable() = other.accessField_retainAvailable(); return *this;
            case FieldIdx_userProperty: initField_userProperty() = other.accessField_userProperty(); return *this;
            case FieldIdx_maxPacketSize: initField_maxPacketSize() = other.accessField_maxPacketSize(); return *this;
            case FieldIdx_wildcardSubAvail: initField_wildcardSubAvail() = other.accessField_wildcardSubAvail(); return *this;
            case FieldIdx_subIdAvail: initField_subIdAvail() = other.accessField_subIdAvail(); return *this;
            case FieldIdx_sharedSubAvail: initField_sharedSubAvail() = other.accessField_sharedSubAvail(); return *this;
            default: break;
        }

        COMMS_ASSERT(false); // Should not be reached
        return *this;
    }

    /// @brief Move assignement operator.
    Property& operator=(Property&& other)
    {    if (this == &other) {
            return *this;
        }

        reset();

        if (!other.currentFieldValid()) {
            return *this;
        }

        switch (other.currentField()) {
            case FieldIdx_payloadFormatIndicator: initField_payloadFormatIndicator() = std::move(other.accessField_payloadFormatIndicator()); return *this;
            case FieldIdx_messageExpiryInterval: initField_messageExpiryInterval() = std::move(other.accessField_messageExpiryInterval()); return *this;
            case FieldIdx_contentType: initField_contentType() = std::move(other.accessField_contentType()); return *this;
            case FieldIdx_responseTopic: initField_responseTopic() = std::move(other.accessField_responseTopic()); return *this;
            case FieldIdx_correlationData: initField_correlationData() = std::move(other.accessField_correlationData()); return *this;
            case FieldIdx_subscriptionId: initField_subscriptionId() = std::move(other.accessField_subscriptionId()); return *this;
            case FieldIdx_sessionExpiryInterval: initField_sessionExpiryInterval() = std::move(other.accessField_sessionExpiryInterval()); return *this;
            case FieldIdx_assignedClientId: initField_assignedClientId() = std::move(other.accessField_assignedClientId()); return *this;
            case FieldIdx_serverKeepAlive: initField_serverKeepAlive() = std::move(other.accessField_serverKeepAlive()); return *this;
            case FieldIdx_authMethod: initField_authMethod() = std::move(other.accessField_authMethod()); return *this;
            case FieldIdx_authData: initField_authData() = std::move(other.accessField_authData()); return *this;
            case FieldIdx_requestProblemInfo: initField_requestProblemInfo() = std::move(other.accessField_requestProblemInfo()); return *this;
            case FieldIdx_willDelayInterval: initField_willDelayInterval() = std::move(other.accessField_willDelayInterval()); return *this;
            case FieldIdx_requestResponseInfo: initField_requestResponseInfo() = std::move(other.accessField_requestResponseInfo()); return *this;
            case FieldIdx_responseInfo: initField_responseInfo() = std::move(other.accessField_responseInfo()); return *this;
            case FieldIdx_serverRef: initField_serverRef() = std::move(other.accessField_serverRef()); return *this;
            case FieldIdx_reasonStr: initField_reasonStr() = std::move(other.accessField_reasonStr()); return *this;
            case FieldIdx_receiveMax: initField_receiveMax() = std::move(other.accessField_receiveMax()); return *this;
            case FieldIdx_topicAliasMax: initField_topicAliasMax() = std::move(other.accessField_topicAliasMax()); return *this;
            case FieldIdx_topicAlias: initField_topicAlias() = std::move(other.accessField_topicAlias()); return *this;
            case FieldIdx_maxQos: initField_maxQos() = std::move(other.accessField_maxQos()); return *this;
            case FieldIdx_retainAvailable: initField_retainAvailable() = std::move(other.accessField_retainAvailable()); return *this;
            case FieldIdx_userProperty: initField_userProperty() = std::move(other.accessField_userProperty()); return *this;
            case FieldIdx_maxPacketSize: initField_maxPacketSize() = std::move(other.accessField_maxPacketSize()); return *this;
            case FieldIdx_wildcardSubAvail: initField_wildcardSubAvail() = std::move(other.accessField_wildcardSubAvail()); return *this;
            case FieldIdx_subIdAvail: initField_subIdAvail() = std::move(other.accessField_subIdAvail()); return *this;
            case FieldIdx_sharedSubAvail: initField_sharedSubAvail() = std::move(other.accessField_sharedSubAvail()); return *this;
            default: break;
        }

        COMMS_ASSERT(false); // Should not be reached
        return *this;
    }

    /// @brief Equality comparison operator.
    bool operator==(const Property& other) const
    {
        if (this == &other) {
            return true;
        }

        if (Base::currentFieldValid() != other.currentFieldValid()) {
            return false;
        }

        if (!Base::currentFieldValid()) {

            return true;
        }

        if (Base::currentField() != other.currentField()) {

            return false;
        }

        switch(Base::currentField()) {
            case FieldIdx_payloadFormatIndicator: return accessField_payloadFormatIndicator() == other.accessField_payloadFormatIndicator();
            case FieldIdx_messageExpiryInterval: return accessField_messageExpiryInterval() == other.accessField_messageExpiryInterval();
            case FieldIdx_contentType: return accessField_contentType() == other.accessField_contentType();
            case FieldIdx_responseTopic: return accessField_responseTopic() == other.accessField_responseTopic();
            case FieldIdx_correlationData: return accessField_correlationData() == other.accessField_correlationData();
            case FieldIdx_subscriptionId: return accessField_subscriptionId() == other.accessField_subscriptionId();
            case FieldIdx_sessionExpiryInterval: return accessField_sessionExpiryInterval() == other.accessField_sessionExpiryInterval();
            case FieldIdx_assignedClientId: return accessField_assignedClientId() == other.accessField_assignedClientId();
            case FieldIdx_serverKeepAlive: return accessField_serverKeepAlive() == other.accessField_serverKeepAlive();
            case FieldIdx_authMethod: return accessField_authMethod() == other.accessField_authMethod();
            case FieldIdx_authData: return accessField_authData() == other.accessField_authData();
            case FieldIdx_requestProblemInfo: return accessField_requestProblemInfo() == other.accessField_requestProblemInfo();
            case FieldIdx_willDelayInterval: return accessField_willDelayInterval() == other.accessField_willDelayInterval();
            case FieldIdx_requestResponseInfo: return accessField_requestResponseInfo() == other.accessField_requestResponseInfo();
            case FieldIdx_responseInfo: return accessField_responseInfo() == other.accessField_responseInfo();
            case FieldIdx_serverRef: return accessField_serverRef() == other.accessField_serverRef();
            case FieldIdx_reasonStr: return accessField_reasonStr() == other.accessField_reasonStr();
            case FieldIdx_receiveMax: return accessField_receiveMax() == other.accessField_receiveMax();
            case FieldIdx_topicAliasMax: return accessField_topicAliasMax() == other.accessField_topicAliasMax();
            case FieldIdx_topicAlias: return accessField_topicAlias() == other.accessField_topicAlias();
            case FieldIdx_maxQos: return accessField_maxQos() == other.accessField_maxQos();
            case FieldIdx_retainAvailable: return accessField_retainAvailable() == other.accessField_retainAvailable();
            case FieldIdx_userProperty: return accessField_userProperty() == other.accessField_userProperty();
            case FieldIdx_maxPacketSize: return accessField_maxPacketSize() == other.accessField_maxPacketSize();
            case FieldIdx_wildcardSubAvail: return accessField_wildcardSubAvail() == other.accessField_wildcardSubAvail();
            case FieldIdx_subIdAvail: return accessField_subIdAvail() == other.accessField_subIdAvail();
            case FieldIdx_sharedSubAvail: return accessField_sharedSubAvail() == other.accessField_sharedSubAvail();
            default: break;
        }

        COMMS_ASSERT(false); // Should not be reached
        return false;
    }

    /// @brief Inequality comparison operator.
    bool operator!=(const Property& other) const
    {
        return !(*this == other);
    }

    /// @brief Order comparison operator.
    bool operator<(const Property& other) const
    {
        if (!Base::currentFieldValid()) {
            return (!other.currentFieldValid());
        }

        if (!other.currentFieldValid()) {
            return false;
        }

        if (Base::currentField() < other.currentField()) {
            return true;
        }

        if (Base::currentField() != other.currentField()) {
            return false;
        }

        if (this == &other) {
            return false;
        }
        switch(Base::currentField()) {
            case FieldIdx_payloadFormatIndicator: return accessField_payloadFormatIndicator() < other.accessField_payloadFormatIndicator();
            case FieldIdx_messageExpiryInterval: return accessField_messageExpiryInterval() < other.accessField_messageExpiryInterval();
            case FieldIdx_contentType: return accessField_contentType() < other.accessField_contentType();
            case FieldIdx_responseTopic: return accessField_responseTopic() < other.accessField_responseTopic();
            case FieldIdx_correlationData: return accessField_correlationData() < other.accessField_correlationData();
            case FieldIdx_subscriptionId: return accessField_subscriptionId() < other.accessField_subscriptionId();
            case FieldIdx_sessionExpiryInterval: return accessField_sessionExpiryInterval() < other.accessField_sessionExpiryInterval();
            case FieldIdx_assignedClientId: return accessField_assignedClientId() < other.accessField_assignedClientId();
            case FieldIdx_serverKeepAlive: return accessField_serverKeepAlive() < other.accessField_serverKeepAlive();
            case FieldIdx_authMethod: return accessField_authMethod() < other.accessField_authMethod();
            case FieldIdx_authData: return accessField_authData() < other.accessField_authData();
            case FieldIdx_requestProblemInfo: return accessField_requestProblemInfo() < other.accessField_requestProblemInfo();
            case FieldIdx_willDelayInterval: return accessField_willDelayInterval() < other.accessField_willDelayInterval();
            case FieldIdx_requestResponseInfo: return accessField_requestResponseInfo() < other.accessField_requestResponseInfo();
            case FieldIdx_responseInfo: return accessField_responseInfo() < other.accessField_responseInfo();
            case FieldIdx_serverRef: return accessField_serverRef() < other.accessField_serverRef();
            case FieldIdx_reasonStr: return accessField_reasonStr() < other.accessField_reasonStr();
            case FieldIdx_receiveMax: return accessField_receiveMax() < other.accessField_receiveMax();
            case FieldIdx_topicAliasMax: return accessField_topicAliasMax() < other.accessField_topicAliasMax();
            case FieldIdx_topicAlias: return accessField_topicAlias() < other.accessField_topicAlias();
            case FieldIdx_maxQos: return accessField_maxQos() < other.accessField_maxQos();
            case FieldIdx_retainAvailable: return accessField_retainAvailable() < other.accessField_retainAvailable();
            case FieldIdx_userProperty: return accessField_userProperty() < other.accessField_userProperty();
            case FieldIdx_maxPacketSize: return accessField_maxPacketSize() < other.accessField_maxPacketSize();
            case FieldIdx_wildcardSubAvail: return accessField_wildcardSubAvail() < other.accessField_wildcardSubAvail();
            case FieldIdx_subIdAvail: return accessField_subIdAvail() < other.accessField_subIdAvail();
            case FieldIdx_sharedSubAvail: return accessField_sharedSubAvail() < other.accessField_sharedSubAvail();
            default: break;
        }

        COMMS_ASSERT(false); // Should not be reached
        return false;
    }

    /// @brief Optimized currentFieldExec functionality.
    /// @details Replaces the currentFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currentFieldExec(TFunc&& func) 
    {
        switch (Base::currentField()) {
            case FieldIdx_payloadFormatIndicator:
                memFieldDispatch<FieldIdx_payloadFormatIndicator>(accessField_payloadFormatIndicator(), std::forward<TFunc>(func));
                break;
            case FieldIdx_messageExpiryInterval:
                memFieldDispatch<FieldIdx_messageExpiryInterval>(accessField_messageExpiryInterval(), std::forward<TFunc>(func));
                break;
            case FieldIdx_contentType:
                memFieldDispatch<FieldIdx_contentType>(accessField_contentType(), std::forward<TFunc>(func));
                break;
            case FieldIdx_responseTopic:
                memFieldDispatch<FieldIdx_responseTopic>(accessField_responseTopic(), std::forward<TFunc>(func));
                break;
            case FieldIdx_correlationData:
                memFieldDispatch<FieldIdx_correlationData>(accessField_correlationData(), std::forward<TFunc>(func));
                break;
            case FieldIdx_subscriptionId:
                memFieldDispatch<FieldIdx_subscriptionId>(accessField_subscriptionId(), std::forward<TFunc>(func));
                break;
            case FieldIdx_sessionExpiryInterval:
                memFieldDispatch<FieldIdx_sessionExpiryInterval>(accessField_sessionExpiryInterval(), std::forward<TFunc>(func));
                break;
            case FieldIdx_assignedClientId:
                memFieldDispatch<FieldIdx_assignedClientId>(accessField_assignedClientId(), std::forward<TFunc>(func));
                break;
            case FieldIdx_serverKeepAlive:
                memFieldDispatch<FieldIdx_serverKeepAlive>(accessField_serverKeepAlive(), std::forward<TFunc>(func));
                break;
            case FieldIdx_authMethod:
                memFieldDispatch<FieldIdx_authMethod>(accessField_authMethod(), std::forward<TFunc>(func));
                break;
            case FieldIdx_authData:
                memFieldDispatch<FieldIdx_authData>(accessField_authData(), std::forward<TFunc>(func));
                break;
            case FieldIdx_requestProblemInfo:
                memFieldDispatch<FieldIdx_requestProblemInfo>(accessField_requestProblemInfo(), std::forward<TFunc>(func));
                break;
            case FieldIdx_willDelayInterval:
                memFieldDispatch<FieldIdx_willDelayInterval>(accessField_willDelayInterval(), std::forward<TFunc>(func));
                break;
            case FieldIdx_requestResponseInfo:
                memFieldDispatch<FieldIdx_requestResponseInfo>(accessField_requestResponseInfo(), std::forward<TFunc>(func));
                break;
            case FieldIdx_responseInfo:
                memFieldDispatch<FieldIdx_responseInfo>(accessField_responseInfo(), std::forward<TFunc>(func));
                break;
            case FieldIdx_serverRef:
                memFieldDispatch<FieldIdx_serverRef>(accessField_serverRef(), std::forward<TFunc>(func));
                break;
            case FieldIdx_reasonStr:
                memFieldDispatch<FieldIdx_reasonStr>(accessField_reasonStr(), std::forward<TFunc>(func));
                break;
            case FieldIdx_receiveMax:
                memFieldDispatch<FieldIdx_receiveMax>(accessField_receiveMax(), std::forward<TFunc>(func));
                break;
            case FieldIdx_topicAliasMax:
                memFieldDispatch<FieldIdx_topicAliasMax>(accessField_topicAliasMax(), std::forward<TFunc>(func));
                break;
            case FieldIdx_topicAlias:
                memFieldDispatch<FieldIdx_topicAlias>(accessField_topicAlias(), std::forward<TFunc>(func));
                break;
            case FieldIdx_maxQos:
                memFieldDispatch<FieldIdx_maxQos>(accessField_maxQos(), std::forward<TFunc>(func));
                break;
            case FieldIdx_retainAvailable:
                memFieldDispatch<FieldIdx_retainAvailable>(accessField_retainAvailable(), std::forward<TFunc>(func));
                break;
            case FieldIdx_userProperty:
                memFieldDispatch<FieldIdx_userProperty>(accessField_userProperty(), std::forward<TFunc>(func));
                break;
            case FieldIdx_maxPacketSize:
                memFieldDispatch<FieldIdx_maxPacketSize>(accessField_maxPacketSize(), std::forward<TFunc>(func));
                break;
            case FieldIdx_wildcardSubAvail:
                memFieldDispatch<FieldIdx_wildcardSubAvail>(accessField_wildcardSubAvail(), std::forward<TFunc>(func));
                break;
            case FieldIdx_subIdAvail:
                memFieldDispatch<FieldIdx_subIdAvail>(accessField_subIdAvail(), std::forward<TFunc>(func));
                break;
            case FieldIdx_sharedSubAvail:
                memFieldDispatch<FieldIdx_sharedSubAvail>(accessField_sharedSubAvail(), std::forward<TFunc>(func));
                break;
            default:
                static constexpr bool Invalid_field_execution = false;
                static_cast<void>(Invalid_field_execution);
                COMMS_ASSERT(Invalid_field_execution);
                break;
        }
    }

    /// @brief The same as currentFieldExec() 
    /// @details Generated for backward comatibility, can be removed in the future.
    template <typename TFunc>
    void currFieldExec(TFunc&& func) 
    {
        currentFieldExec(std::forward<TFunc>(func));
    }

    /// @brief Optimized currentFieldExec functionality (const variant).
    /// @details Replaces the currentFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currentFieldExec(TFunc&& func) const
    {
        switch (Base::currentField()) {
            case FieldIdx_payloadFormatIndicator:
                memFieldDispatch<FieldIdx_payloadFormatIndicator>(accessField_payloadFormatIndicator(), std::forward<TFunc>(func));
                break;
            case FieldIdx_messageExpiryInterval:
                memFieldDispatch<FieldIdx_messageExpiryInterval>(accessField_messageExpiryInterval(), std::forward<TFunc>(func));
                break;
            case FieldIdx_contentType:
                memFieldDispatch<FieldIdx_contentType>(accessField_contentType(), std::forward<TFunc>(func));
                break;
            case FieldIdx_responseTopic:
                memFieldDispatch<FieldIdx_responseTopic>(accessField_responseTopic(), std::forward<TFunc>(func));
                break;
            case FieldIdx_correlationData:
                memFieldDispatch<FieldIdx_correlationData>(accessField_correlationData(), std::forward<TFunc>(func));
                break;
            case FieldIdx_subscriptionId:
                memFieldDispatch<FieldIdx_subscriptionId>(accessField_subscriptionId(), std::forward<TFunc>(func));
                break;
            case FieldIdx_sessionExpiryInterval:
                memFieldDispatch<FieldIdx_sessionExpiryInterval>(accessField_sessionExpiryInterval(), std::forward<TFunc>(func));
                break;
            case FieldIdx_assignedClientId:
                memFieldDispatch<FieldIdx_assignedClientId>(accessField_assignedClientId(), std::forward<TFunc>(func));
                break;
            case FieldIdx_serverKeepAlive:
                memFieldDispatch<FieldIdx_serverKeepAlive>(accessField_serverKeepAlive(), std::forward<TFunc>(func));
                break;
            case FieldIdx_authMethod:
                memFieldDispatch<FieldIdx_authMethod>(accessField_authMethod(), std::forward<TFunc>(func));
                break;
            case FieldIdx_authData:
                memFieldDispatch<FieldIdx_authData>(accessField_authData(), std::forward<TFunc>(func));
                break;
            case FieldIdx_requestProblemInfo:
                memFieldDispatch<FieldIdx_requestProblemInfo>(accessField_requestProblemInfo(), std::forward<TFunc>(func));
                break;
            case FieldIdx_willDelayInterval:
                memFieldDispatch<FieldIdx_willDelayInterval>(accessField_willDelayInterval(), std::forward<TFunc>(func));
                break;
            case FieldIdx_requestResponseInfo:
                memFieldDispatch<FieldIdx_requestResponseInfo>(accessField_requestResponseInfo(), std::forward<TFunc>(func));
                break;
            case FieldIdx_responseInfo:
                memFieldDispatch<FieldIdx_responseInfo>(accessField_responseInfo(), std::forward<TFunc>(func));
                break;
            case FieldIdx_serverRef:
                memFieldDispatch<FieldIdx_serverRef>(accessField_serverRef(), std::forward<TFunc>(func));
                break;
            case FieldIdx_reasonStr:
                memFieldDispatch<FieldIdx_reasonStr>(accessField_reasonStr(), std::forward<TFunc>(func));
                break;
            case FieldIdx_receiveMax:
                memFieldDispatch<FieldIdx_receiveMax>(accessField_receiveMax(), std::forward<TFunc>(func));
                break;
            case FieldIdx_topicAliasMax:
                memFieldDispatch<FieldIdx_topicAliasMax>(accessField_topicAliasMax(), std::forward<TFunc>(func));
                break;
            case FieldIdx_topicAlias:
                memFieldDispatch<FieldIdx_topicAlias>(accessField_topicAlias(), std::forward<TFunc>(func));
                break;
            case FieldIdx_maxQos:
                memFieldDispatch<FieldIdx_maxQos>(accessField_maxQos(), std::forward<TFunc>(func));
                break;
            case FieldIdx_retainAvailable:
                memFieldDispatch<FieldIdx_retainAvailable>(accessField_retainAvailable(), std::forward<TFunc>(func));
                break;
            case FieldIdx_userProperty:
                memFieldDispatch<FieldIdx_userProperty>(accessField_userProperty(), std::forward<TFunc>(func));
                break;
            case FieldIdx_maxPacketSize:
                memFieldDispatch<FieldIdx_maxPacketSize>(accessField_maxPacketSize(), std::forward<TFunc>(func));
                break;
            case FieldIdx_wildcardSubAvail:
                memFieldDispatch<FieldIdx_wildcardSubAvail>(accessField_wildcardSubAvail(), std::forward<TFunc>(func));
                break;
            case FieldIdx_subIdAvail:
                memFieldDispatch<FieldIdx_subIdAvail>(accessField_subIdAvail(), std::forward<TFunc>(func));
                break;
            case FieldIdx_sharedSubAvail:
                memFieldDispatch<FieldIdx_sharedSubAvail>(accessField_sharedSubAvail(), std::forward<TFunc>(func));
                break;
            default:
                static constexpr bool Invalid_field_execution = false;
                static_cast<void>(Invalid_field_execution);
                COMMS_ASSERT(Invalid_field_execution);
                break;
        }
    }

    /// @brief The same as currentFieldExec()  (const variant)
    /// @details Generated for backward comatibility, can be removed in the future.
    template <typename TFunc>
    void currFieldExec(TFunc&& func) const
    {
        currentFieldExec(std::forward<TFunc>(func));
    }

    /// @brief Optimized runtime selection field functionality.
    /// @details Replaces the selectField() member function defined
    ///    by @b comms::field::Variant.
    void selectField(std::size_t idx)
    {
        if (Base::currentField() == idx) {
            return;
        }

        reset();
        switch (idx) {
            case FieldIdx_payloadFormatIndicator: initField_payloadFormatIndicator(); return;
            case FieldIdx_messageExpiryInterval: initField_messageExpiryInterval(); return;
            case FieldIdx_contentType: initField_contentType(); return;
            case FieldIdx_responseTopic: initField_responseTopic(); return;
            case FieldIdx_correlationData: initField_correlationData(); return;
            case FieldIdx_subscriptionId: initField_subscriptionId(); return;
            case FieldIdx_sessionExpiryInterval: initField_sessionExpiryInterval(); return;
            case FieldIdx_assignedClientId: initField_assignedClientId(); return;
            case FieldIdx_serverKeepAlive: initField_serverKeepAlive(); return;
            case FieldIdx_authMethod: initField_authMethod(); return;
            case FieldIdx_authData: initField_authData(); return;
            case FieldIdx_requestProblemInfo: initField_requestProblemInfo(); return;
            case FieldIdx_willDelayInterval: initField_willDelayInterval(); return;
            case FieldIdx_requestResponseInfo: initField_requestResponseInfo(); return;
            case FieldIdx_responseInfo: initField_responseInfo(); return;
            case FieldIdx_serverRef: initField_serverRef(); return;
            case FieldIdx_reasonStr: initField_reasonStr(); return;
            case FieldIdx_receiveMax: initField_receiveMax(); return;
            case FieldIdx_topicAliasMax: initField_topicAliasMax(); return;
            case FieldIdx_topicAlias: initField_topicAlias(); return;
            case FieldIdx_maxQos: initField_maxQos(); return;
            case FieldIdx_retainAvailable: initField_retainAvailable(); return;
            case FieldIdx_userProperty: initField_userProperty(); return;
            case FieldIdx_maxPacketSize: initField_maxPacketSize(); return;
            case FieldIdx_wildcardSubAvail: initField_wildcardSubAvail(); return;
            case FieldIdx_subIdAvail: initField_subIdAvail(); return;
            case FieldIdx_sharedSubAvail: initField_sharedSubAvail(); return;
            default: break;
        }
        COMMS_ASSERT(false); // Should not be reached
    }

    /// @brief Optimized reset functionality.
    /// @details Replaces the reset() member function defined
    ///    by @b comms::field::Variant.
    void reset()
    {
        if (!Base::currentFieldValid()) {
            return;
        }

        switch (Base::currentField()) {
            case FieldIdx_payloadFormatIndicator: deinitField_payloadFormatIndicator(); return;
            case FieldIdx_messageExpiryInterval: deinitField_messageExpiryInterval(); return;
            case FieldIdx_contentType: deinitField_contentType(); return;
            case FieldIdx_responseTopic: deinitField_responseTopic(); return;
            case FieldIdx_correlationData: deinitField_correlationData(); return;
            case FieldIdx_subscriptionId: deinitField_subscriptionId(); return;
            case FieldIdx_sessionExpiryInterval: deinitField_sessionExpiryInterval(); return;
            case FieldIdx_assignedClientId: deinitField_assignedClientId(); return;
            case FieldIdx_serverKeepAlive: deinitField_serverKeepAlive(); return;
            case FieldIdx_authMethod: deinitField_authMethod(); return;
            case FieldIdx_authData: deinitField_authData(); return;
            case FieldIdx_requestProblemInfo: deinitField_requestProblemInfo(); return;
            case FieldIdx_willDelayInterval: deinitField_willDelayInterval(); return;
            case FieldIdx_requestResponseInfo: deinitField_requestResponseInfo(); return;
            case FieldIdx_responseInfo: deinitField_responseInfo(); return;
            case FieldIdx_serverRef: deinitField_serverRef(); return;
            case FieldIdx_reasonStr: deinitField_reasonStr(); return;
            case FieldIdx_receiveMax: deinitField_receiveMax(); return;
            case FieldIdx_topicAliasMax: deinitField_topicAliasMax(); return;
            case FieldIdx_topicAlias: deinitField_topicAlias(); return;
            case FieldIdx_maxQos: deinitField_maxQos(); return;
            case FieldIdx_retainAvailable: deinitField_retainAvailable(); return;
            case FieldIdx_userProperty: deinitField_userProperty(); return;
            case FieldIdx_maxPacketSize: deinitField_maxPacketSize(); return;
            case FieldIdx_wildcardSubAvail: deinitField_wildcardSubAvail(); return;
            case FieldIdx_subIdAvail: deinitField_subIdAvail(); return;
            case FieldIdx_sharedSubAvail: deinitField_sharedSubAvail(); return;
            default: break;
        }
        COMMS_ASSERT(false); // Should not be reached
    }

    /// @brief Optimized check ability to write.
    /// @details Replaces the canWrite() member function defined
    ///    by @b comms::field::Variant.
    bool canWrite() const
    {
        if (!Base::currentFieldValid()) {
            return true;
        }

        switch (Base::currentField()) {
            case FieldIdx_payloadFormatIndicator: return accessField_payloadFormatIndicator().canWrite();
            case FieldIdx_messageExpiryInterval: return accessField_messageExpiryInterval().canWrite();
            case FieldIdx_contentType: return accessField_contentType().canWrite();
            case FieldIdx_responseTopic: return accessField_responseTopic().canWrite();
            case FieldIdx_correlationData: return accessField_correlationData().canWrite();
            case FieldIdx_subscriptionId: return accessField_subscriptionId().canWrite();
            case FieldIdx_sessionExpiryInterval: return accessField_sessionExpiryInterval().canWrite();
            case FieldIdx_assignedClientId: return accessField_assignedClientId().canWrite();
            case FieldIdx_serverKeepAlive: return accessField_serverKeepAlive().canWrite();
            case FieldIdx_authMethod: return accessField_authMethod().canWrite();
            case FieldIdx_authData: return accessField_authData().canWrite();
            case FieldIdx_requestProblemInfo: return accessField_requestProblemInfo().canWrite();
            case FieldIdx_willDelayInterval: return accessField_willDelayInterval().canWrite();
            case FieldIdx_requestResponseInfo: return accessField_requestResponseInfo().canWrite();
            case FieldIdx_responseInfo: return accessField_responseInfo().canWrite();
            case FieldIdx_serverRef: return accessField_serverRef().canWrite();
            case FieldIdx_reasonStr: return accessField_reasonStr().canWrite();
            case FieldIdx_receiveMax: return accessField_receiveMax().canWrite();
            case FieldIdx_topicAliasMax: return accessField_topicAliasMax().canWrite();
            case FieldIdx_topicAlias: return accessField_topicAlias().canWrite();
            case FieldIdx_maxQos: return accessField_maxQos().canWrite();
            case FieldIdx_retainAvailable: return accessField_retainAvailable().canWrite();
            case FieldIdx_userProperty: return accessField_userProperty().canWrite();
            case FieldIdx_maxPacketSize: return accessField_maxPacketSize().canWrite();
            case FieldIdx_wildcardSubAvail: return accessField_wildcardSubAvail().canWrite();
            case FieldIdx_subIdAvail: return accessField_subIdAvail().canWrite();
            case FieldIdx_sharedSubAvail: return accessField_sharedSubAvail().canWrite();
            default: break;
        }
        COMMS_ASSERT(false); // Should not be reached
        return false;
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return cc_mqtt5::field::PropertyCommon::name();
    }

    COMMS_MSVC_WARNING_PUSH
    COMMS_MSVC_WARNING_DISABLE(4702)
    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus read(TIter& iter, std::size_t len)
    {
        reset();
        using CommonKeyField=
            comms::field::IntValue<
                cc_mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>
            >;
        CommonKeyField commonKeyField;

        auto origIter = iter;
        auto es = commonKeyField.read(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }

        auto consumedLen = static_cast<std::size_t>(std::distance(origIter, iter));
        COMMS_ASSERT(consumedLen <= len);
        len -= consumedLen;

        switch (commonKeyField.getValue()) {
            case 1U /* 0x00000001U */:
                {
                    auto& field_payloadFormatIndicator = initField_payloadFormatIndicator();
                    COMMS_ASSERT(field_payloadFormatIndicator.field_id().getValue() == commonKeyField.getValue());
                    return field_payloadFormatIndicator.template readFrom<1>(iter, len);
                }
            case 2U /* 0x00000002U */:
                {
                    auto& field_messageExpiryInterval = initField_messageExpiryInterval();
                    COMMS_ASSERT(field_messageExpiryInterval.field_id().getValue() == commonKeyField.getValue());
                    return field_messageExpiryInterval.template readFrom<1>(iter, len);
                }
            case 3U /* 0x00000003U */:
                {
                    auto& field_contentType = initField_contentType();
                    COMMS_ASSERT(field_contentType.field_id().getValue() == commonKeyField.getValue());
                    return field_contentType.template readFrom<1>(iter, len);
                }
            case 8U /* 0x00000008U */:
                {
                    auto& field_responseTopic = initField_responseTopic();
                    COMMS_ASSERT(field_responseTopic.field_id().getValue() == commonKeyField.getValue());
                    return field_responseTopic.template readFrom<1>(iter, len);
                }
            case 9U /* 0x00000009U */:
                {
                    auto& field_correlationData = initField_correlationData();
                    COMMS_ASSERT(field_correlationData.field_id().getValue() == commonKeyField.getValue());
                    return field_correlationData.template readFrom<1>(iter, len);
                }
            case 11U /* 0x0000000BU */:
                {
                    auto& field_subscriptionId = initField_subscriptionId();
                    COMMS_ASSERT(field_subscriptionId.field_id().getValue() == commonKeyField.getValue());
                    return field_subscriptionId.template readFrom<1>(iter, len);
                }
            case 17U /* 0x00000011U */:
                {
                    auto& field_sessionExpiryInterval = initField_sessionExpiryInterval();
                    COMMS_ASSERT(field_sessionExpiryInterval.field_id().getValue() == commonKeyField.getValue());
                    return field_sessionExpiryInterval.template readFrom<1>(iter, len);
                }
            case 18U /* 0x00000012U */:
                {
                    auto& field_assignedClientId = initField_assignedClientId();
                    COMMS_ASSERT(field_assignedClientId.field_id().getValue() == commonKeyField.getValue());
                    return field_assignedClientId.template readFrom<1>(iter, len);
                }
            case 19U /* 0x00000013U */:
                {
                    auto& field_serverKeepAlive = initField_serverKeepAlive();
                    COMMS_ASSERT(field_serverKeepAlive.field_id().getValue() == commonKeyField.getValue());
                    return field_serverKeepAlive.template readFrom<1>(iter, len);
                }
            case 21U /* 0x00000015U */:
                {
                    auto& field_authMethod = initField_authMethod();
                    COMMS_ASSERT(field_authMethod.field_id().getValue() == commonKeyField.getValue());
                    return field_authMethod.template readFrom<1>(iter, len);
                }
            case 22U /* 0x00000016U */:
                {
                    auto& field_authData = initField_authData();
                    COMMS_ASSERT(field_authData.field_id().getValue() == commonKeyField.getValue());
                    return field_authData.template readFrom<1>(iter, len);
                }
            case 23U /* 0x00000017U */:
                {
                    auto& field_requestProblemInfo = initField_requestProblemInfo();
                    COMMS_ASSERT(field_requestProblemInfo.field_id().getValue() == commonKeyField.getValue());
                    return field_requestProblemInfo.template readFrom<1>(iter, len);
                }
            case 24U /* 0x00000018U */:
                {
                    auto& field_willDelayInterval = initField_willDelayInterval();
                    COMMS_ASSERT(field_willDelayInterval.field_id().getValue() == commonKeyField.getValue());
                    return field_willDelayInterval.template readFrom<1>(iter, len);
                }
            case 25U /* 0x00000019U */:
                {
                    auto& field_requestResponseInfo = initField_requestResponseInfo();
                    COMMS_ASSERT(field_requestResponseInfo.field_id().getValue() == commonKeyField.getValue());
                    return field_requestResponseInfo.template readFrom<1>(iter, len);
                }
            case 26U /* 0x0000001AU */:
                {
                    auto& field_responseInfo = initField_responseInfo();
                    COMMS_ASSERT(field_responseInfo.field_id().getValue() == commonKeyField.getValue());
                    return field_responseInfo.template readFrom<1>(iter, len);
                }
            case 28U /* 0x0000001CU */:
                {
                    auto& field_serverRef = initField_serverRef();
                    COMMS_ASSERT(field_serverRef.field_id().getValue() == commonKeyField.getValue());
                    return field_serverRef.template readFrom<1>(iter, len);
                }
            case 31U /* 0x0000001FU */:
                {
                    auto& field_reasonStr = initField_reasonStr();
                    COMMS_ASSERT(field_reasonStr.field_id().getValue() == commonKeyField.getValue());
                    return field_reasonStr.template readFrom<1>(iter, len);
                }
            case 33U /* 0x00000021U */:
                {
                    auto& field_receiveMax = initField_receiveMax();
                    COMMS_ASSERT(field_receiveMax.field_id().getValue() == commonKeyField.getValue());
                    return field_receiveMax.template readFrom<1>(iter, len);
                }
            case 34U /* 0x00000022U */:
                {
                    auto& field_topicAliasMax = initField_topicAliasMax();
                    COMMS_ASSERT(field_topicAliasMax.field_id().getValue() == commonKeyField.getValue());
                    return field_topicAliasMax.template readFrom<1>(iter, len);
                }
            case 35U /* 0x00000023U */:
                {
                    auto& field_topicAlias = initField_topicAlias();
                    COMMS_ASSERT(field_topicAlias.field_id().getValue() == commonKeyField.getValue());
                    return field_topicAlias.template readFrom<1>(iter, len);
                }
            case 36U /* 0x00000024U */:
                {
                    auto& field_maxQos = initField_maxQos();
                    COMMS_ASSERT(field_maxQos.field_id().getValue() == commonKeyField.getValue());
                    return field_maxQos.template readFrom<1>(iter, len);
                }
            case 37U /* 0x00000025U */:
                {
                    auto& field_retainAvailable = initField_retainAvailable();
                    COMMS_ASSERT(field_retainAvailable.field_id().getValue() == commonKeyField.getValue());
                    return field_retainAvailable.template readFrom<1>(iter, len);
                }
            case 38U /* 0x00000026U */:
                {
                    auto& field_userProperty = initField_userProperty();
                    COMMS_ASSERT(field_userProperty.field_id().getValue() == commonKeyField.getValue());
                    return field_userProperty.template readFrom<1>(iter, len);
                }
            case 39U /* 0x00000027U */:
                {
                    auto& field_maxPacketSize = initField_maxPacketSize();
                    COMMS_ASSERT(field_maxPacketSize.field_id().getValue() == commonKeyField.getValue());
                    return field_maxPacketSize.template readFrom<1>(iter, len);
                }
            case 40U /* 0x00000028U */:
                {
                    auto& field_wildcardSubAvail = initField_wildcardSubAvail();
                    COMMS_ASSERT(field_wildcardSubAvail.field_id().getValue() == commonKeyField.getValue());
                    return field_wildcardSubAvail.template readFrom<1>(iter, len);
                }
            case 41U /* 0x00000029U */:
                {
                    auto& field_subIdAvail = initField_subIdAvail();
                    COMMS_ASSERT(field_subIdAvail.field_id().getValue() == commonKeyField.getValue());
                    return field_subIdAvail.template readFrom<1>(iter, len);
                }
            case 42U /* 0x0000002AU */:
                {
                    auto& field_sharedSubAvail = initField_sharedSubAvail();
                    COMMS_ASSERT(field_sharedSubAvail.field_id().getValue() == commonKeyField.getValue());
                    return field_sharedSubAvail.template readFrom<1>(iter, len);
                }
            default:
                break;
        };

        return comms::ErrorStatus::InvalidMsgData;
    }
    COMMS_MSVC_WARNING_POP

    /// @brief Generated write functionality.
    template <typename TIter>
    comms::ErrorStatus write(TIter& iter, std::size_t len) const
    {
        switch (Base::currentField()) {
            case FieldIdx_payloadFormatIndicator: return accessField_payloadFormatIndicator().write(iter, len);
            case FieldIdx_messageExpiryInterval: return accessField_messageExpiryInterval().write(iter, len);
            case FieldIdx_contentType: return accessField_contentType().write(iter, len);
            case FieldIdx_responseTopic: return accessField_responseTopic().write(iter, len);
            case FieldIdx_correlationData: return accessField_correlationData().write(iter, len);
            case FieldIdx_subscriptionId: return accessField_subscriptionId().write(iter, len);
            case FieldIdx_sessionExpiryInterval: return accessField_sessionExpiryInterval().write(iter, len);
            case FieldIdx_assignedClientId: return accessField_assignedClientId().write(iter, len);
            case FieldIdx_serverKeepAlive: return accessField_serverKeepAlive().write(iter, len);
            case FieldIdx_authMethod: return accessField_authMethod().write(iter, len);
            case FieldIdx_authData: return accessField_authData().write(iter, len);
            case FieldIdx_requestProblemInfo: return accessField_requestProblemInfo().write(iter, len);
            case FieldIdx_willDelayInterval: return accessField_willDelayInterval().write(iter, len);
            case FieldIdx_requestResponseInfo: return accessField_requestResponseInfo().write(iter, len);
            case FieldIdx_responseInfo: return accessField_responseInfo().write(iter, len);
            case FieldIdx_serverRef: return accessField_serverRef().write(iter, len);
            case FieldIdx_reasonStr: return accessField_reasonStr().write(iter, len);
            case FieldIdx_receiveMax: return accessField_receiveMax().write(iter, len);
            case FieldIdx_topicAliasMax: return accessField_topicAliasMax().write(iter, len);
            case FieldIdx_topicAlias: return accessField_topicAlias().write(iter, len);
            case FieldIdx_maxQos: return accessField_maxQos().write(iter, len);
            case FieldIdx_retainAvailable: return accessField_retainAvailable().write(iter, len);
            case FieldIdx_userProperty: return accessField_userProperty().write(iter, len);
            case FieldIdx_maxPacketSize: return accessField_maxPacketSize().write(iter, len);
            case FieldIdx_wildcardSubAvail: return accessField_wildcardSubAvail().write(iter, len);
            case FieldIdx_subIdAvail: return accessField_subIdAvail().write(iter, len);
            case FieldIdx_sharedSubAvail: return accessField_sharedSubAvail().write(iter, len);
            default: break;
        }

        return comms::ErrorStatus::Success;
    }

    /// @brief Generated refresh functionality.
    bool refresh()
    {
        switch (Base::currentField()) {
            case FieldIdx_payloadFormatIndicator: return accessField_payloadFormatIndicator().refresh();
            case FieldIdx_messageExpiryInterval: return accessField_messageExpiryInterval().refresh();
            case FieldIdx_contentType: return accessField_contentType().refresh();
            case FieldIdx_responseTopic: return accessField_responseTopic().refresh();
            case FieldIdx_correlationData: return accessField_correlationData().refresh();
            case FieldIdx_subscriptionId: return accessField_subscriptionId().refresh();
            case FieldIdx_sessionExpiryInterval: return accessField_sessionExpiryInterval().refresh();
            case FieldIdx_assignedClientId: return accessField_assignedClientId().refresh();
            case FieldIdx_serverKeepAlive: return accessField_serverKeepAlive().refresh();
            case FieldIdx_authMethod: return accessField_authMethod().refresh();
            case FieldIdx_authData: return accessField_authData().refresh();
            case FieldIdx_requestProblemInfo: return accessField_requestProblemInfo().refresh();
            case FieldIdx_willDelayInterval: return accessField_willDelayInterval().refresh();
            case FieldIdx_requestResponseInfo: return accessField_requestResponseInfo().refresh();
            case FieldIdx_responseInfo: return accessField_responseInfo().refresh();
            case FieldIdx_serverRef: return accessField_serverRef().refresh();
            case FieldIdx_reasonStr: return accessField_reasonStr().refresh();
            case FieldIdx_receiveMax: return accessField_receiveMax().refresh();
            case FieldIdx_topicAliasMax: return accessField_topicAliasMax().refresh();
            case FieldIdx_topicAlias: return accessField_topicAlias().refresh();
            case FieldIdx_maxQos: return accessField_maxQos().refresh();
            case FieldIdx_retainAvailable: return accessField_retainAvailable().refresh();
            case FieldIdx_userProperty: return accessField_userProperty().refresh();
            case FieldIdx_maxPacketSize: return accessField_maxPacketSize().refresh();
            case FieldIdx_wildcardSubAvail: return accessField_wildcardSubAvail().refresh();
            case FieldIdx_subIdAvail: return accessField_subIdAvail().refresh();
            case FieldIdx_sharedSubAvail: return accessField_sharedSubAvail().refresh();
            default: break;
        }

        return false;
    }

    /// @brief Generated length functionality.
    std::size_t length() const
    {
        switch (Base::currentField()) {
            case FieldIdx_payloadFormatIndicator: return accessField_payloadFormatIndicator().length();
            case FieldIdx_messageExpiryInterval: return accessField_messageExpiryInterval().length();
            case FieldIdx_contentType: return accessField_contentType().length();
            case FieldIdx_responseTopic: return accessField_responseTopic().length();
            case FieldIdx_correlationData: return accessField_correlationData().length();
            case FieldIdx_subscriptionId: return accessField_subscriptionId().length();
            case FieldIdx_sessionExpiryInterval: return accessField_sessionExpiryInterval().length();
            case FieldIdx_assignedClientId: return accessField_assignedClientId().length();
            case FieldIdx_serverKeepAlive: return accessField_serverKeepAlive().length();
            case FieldIdx_authMethod: return accessField_authMethod().length();
            case FieldIdx_authData: return accessField_authData().length();
            case FieldIdx_requestProblemInfo: return accessField_requestProblemInfo().length();
            case FieldIdx_willDelayInterval: return accessField_willDelayInterval().length();
            case FieldIdx_requestResponseInfo: return accessField_requestResponseInfo().length();
            case FieldIdx_responseInfo: return accessField_responseInfo().length();
            case FieldIdx_serverRef: return accessField_serverRef().length();
            case FieldIdx_reasonStr: return accessField_reasonStr().length();
            case FieldIdx_receiveMax: return accessField_receiveMax().length();
            case FieldIdx_topicAliasMax: return accessField_topicAliasMax().length();
            case FieldIdx_topicAlias: return accessField_topicAlias().length();
            case FieldIdx_maxQos: return accessField_maxQos().length();
            case FieldIdx_retainAvailable: return accessField_retainAvailable().length();
            case FieldIdx_userProperty: return accessField_userProperty().length();
            case FieldIdx_maxPacketSize: return accessField_maxPacketSize().length();
            case FieldIdx_wildcardSubAvail: return accessField_wildcardSubAvail().length();
            case FieldIdx_subIdAvail: return accessField_subIdAvail().length();
            case FieldIdx_sharedSubAvail: return accessField_sharedSubAvail().length();
            default: break;
        }

        return 0U;
    }

    /// @brief Generated validity check functionality.
    bool valid() const
    {
        switch (Base::currentField()) {
            case FieldIdx_payloadFormatIndicator: return accessField_payloadFormatIndicator().valid();
            case FieldIdx_messageExpiryInterval: return accessField_messageExpiryInterval().valid();
            case FieldIdx_contentType: return accessField_contentType().valid();
            case FieldIdx_responseTopic: return accessField_responseTopic().valid();
            case FieldIdx_correlationData: return accessField_correlationData().valid();
            case FieldIdx_subscriptionId: return accessField_subscriptionId().valid();
            case FieldIdx_sessionExpiryInterval: return accessField_sessionExpiryInterval().valid();
            case FieldIdx_assignedClientId: return accessField_assignedClientId().valid();
            case FieldIdx_serverKeepAlive: return accessField_serverKeepAlive().valid();
            case FieldIdx_authMethod: return accessField_authMethod().valid();
            case FieldIdx_authData: return accessField_authData().valid();
            case FieldIdx_requestProblemInfo: return accessField_requestProblemInfo().valid();
            case FieldIdx_willDelayInterval: return accessField_willDelayInterval().valid();
            case FieldIdx_requestResponseInfo: return accessField_requestResponseInfo().valid();
            case FieldIdx_responseInfo: return accessField_responseInfo().valid();
            case FieldIdx_serverRef: return accessField_serverRef().valid();
            case FieldIdx_reasonStr: return accessField_reasonStr().valid();
            case FieldIdx_receiveMax: return accessField_receiveMax().valid();
            case FieldIdx_topicAliasMax: return accessField_topicAliasMax().valid();
            case FieldIdx_topicAlias: return accessField_topicAlias().valid();
            case FieldIdx_maxQos: return accessField_maxQos().valid();
            case FieldIdx_retainAvailable: return accessField_retainAvailable().valid();
            case FieldIdx_userProperty: return accessField_userProperty().valid();
            case FieldIdx_maxPacketSize: return accessField_maxPacketSize().valid();
            case FieldIdx_wildcardSubAvail: return accessField_wildcardSubAvail().valid();
            case FieldIdx_subIdAvail: return accessField_subIdAvail().valid();
            case FieldIdx_sharedSubAvail: return accessField_sharedSubAvail().valid();
            default: break;
        }

        return false;
    }

private:
    template <std::size_t TIdx, typename TField, typename TFunc>
    static void memFieldDispatch(TField&& f, TFunc&& func)
    {
        #ifdef _MSC_VER
            func.operator()<TIdx>(std::forward<TField>(f)); // VS compiler
        #else // #ifdef _MSC_VER
            func.template operator()<TIdx>(std::forward<TField>(f)); // All other compilers
        #endif // #ifdef _MSC_VER
    }
};

} // namespace field

} // namespace cc_mqtt5
