// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_mqtt5::field::Property field.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_mqtt5/field/BinDataCommon.h"
#include "cc_mqtt5/field/EnableEnumCommon.h"
#include "cc_mqtt5/field/QosCommon.h"
#include "cc_mqtt5/field/StringCommon.h"
#include "cc_mqtt5/field/VarLenIntCommon.h"

namespace cc_mqtt5
{

namespace field
{

/// @brief Scope for all the common definitions of the member fields of
///     @ref cc_mqtt5::field::Property field.
struct PropertyMembersCommon
{
    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::PayloadFormatIndicator field.
    struct PayloadFormatIndicatorMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::PayloadFormatIndicatorMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::PayloadFormatIndicatorMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::PayloadFormatIndicatorMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::PayloadFormatIndicatorMembers::Value field.
        struct ValueCommon
        {
            /// @brief Values enumerator for
            ///     @ref cc_mqtt5::field::PropertyMembers::PayloadFormatIndicatorMembers::Value field.
            enum class ValueType : std::uint8_t
            {
                Unspecified = 0, ///< value @b Unspecified. 
                Utf8 = 1, ///< value <b>UTF-8</b>. 

                // --- Extra values generated for convenience ---
                FirstValue = 0, ///< First defined value.
                LastValue = 1, ///< Last defined value.
                ValuesLimit = 2, ///< Upper limit for defined values.
            };

            /// @brief Single value name info entry
            using ValueNameInfo = const char*;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @details The @b first value of the pair is pointer to the map array,
            ///     The @b second value of the pair is the size of the array.
            using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::PayloadFormatIndicatorMembers::Value field.
            static const char* name()
            {
                return "Value";
            }

            /// @brief Retrieve name of the enum value
            static const char* valueName(ValueType val)
            {
                auto namesMapInfo = valueNamesMap();
                if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                    return nullptr;
                }

                return namesMapInfo.first[static_cast<std::size_t>(val)];
            }

            /// @brief Retrieve map of enum value names
            static ValueNamesMapInfo valueNamesMap()
            {
                static const char* Map[] = {
                    "Unspecified",
                    "UTF-8"
                };
                static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                return std::make_pair(&Map[0], MapSize);
            }
        };

        /// @brief Values enumerator for
        ///     @ref cc_mqtt5::field::PropertyMembers::PayloadFormatIndicatorMembers::Value field.
        using ValueVal = ValueCommon::ValueType;
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::PayloadFormatIndicator field.
    struct PayloadFormatIndicatorCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::PayloadFormatIndicator field.
        static const char* name()
        {
            return "Property Format Indicator";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::MessageExpiryInterval field.
    struct MessageExpiryIntervalMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::MessageExpiryIntervalMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::MessageExpiryIntervalMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::MessageExpiryIntervalMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::MessageExpiryIntervalMembers::Value field.
        struct ValueCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::MessageExpiryIntervalMembers::Value field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::MessageExpiryIntervalMembers::Value field.
            static const char* name()
            {
                return "Value";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::MessageExpiryInterval field.
    struct MessageExpiryIntervalCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::MessageExpiryInterval field.
        static const char* name()
        {
            return "Message Expiry Interval";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::ContentType field.
    struct ContentTypeMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ContentTypeMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::ContentTypeMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ContentTypeMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ContentTypeMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::StringCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ContentTypeMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::ContentType field.
    struct ContentTypeCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ContentType field.
        static const char* name()
        {
            return "Content Type";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::ResponseTopic field.
    struct ResponseTopicMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ResponseTopicMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::ResponseTopicMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ResponseTopicMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ResponseTopicMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::StringCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ResponseTopicMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::ResponseTopic field.
    struct ResponseTopicCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ResponseTopic field.
        static const char* name()
        {
            return "Response Topic";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::CorrelationData field.
    struct CorrelationDataMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::CorrelationDataMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::CorrelationDataMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::CorrelationDataMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::CorrelationDataMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::BinDataCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::CorrelationDataMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::CorrelationData field.
    struct CorrelationDataCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::CorrelationData field.
        static const char* name()
        {
            return "Correlation Data";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::SubscriptionId field.
    struct SubscriptionIdMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::SubscriptionIdMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::SubscriptionIdMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SubscriptionIdMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::SubscriptionIdMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::VarLenIntCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SubscriptionIdMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::SubscriptionId field.
    struct SubscriptionIdCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SubscriptionId field.
        static const char* name()
        {
            return "Subscription ID";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::SessionExpiryInterval field.
    struct SessionExpiryIntervalMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::SessionExpiryIntervalMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::SessionExpiryIntervalMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SessionExpiryIntervalMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::SessionExpiryIntervalMembers::Value field.
        struct ValueCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::SessionExpiryIntervalMembers::Value field.
            using ValueType = std::uint32_t;

            /// @brief Single special value name info entry.
            using SpecialNameInfo = std::pair<ValueType, const char*>;

            /// @brief Type returned from @ref specialNamesMap() member function.
            /// @details The @b first value of the pair is pointer to the map array,
            ///     The @b second value of the pair is the size of the array.
            using SpecialNamesMapInfo = std::pair<const SpecialNameInfo*, std::size_t>;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SessionExpiryIntervalMembers::Value field.
            static const char* name()
            {
                return "Value";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return true;
            }

            /// @brief Special value <b>"Infinite"</b>.
            static constexpr ValueType valueInfinite()
            {
                return static_cast<ValueType>(0xffffffffLL);
            }

            /// @brief Retrieve map of special value names
            static SpecialNamesMapInfo specialNamesMap()
            {
                static const SpecialNameInfo Map[] = {
                    std::make_pair(valueInfinite(), "Infinite")
                };
                static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                return std::make_pair(&Map[0], MapSize);
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::SessionExpiryInterval field.
    struct SessionExpiryIntervalCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SessionExpiryInterval field.
        static const char* name()
        {
            return "Session Expiry Interval";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::AssignedClientId field.
    struct AssignedClientIdMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::AssignedClientIdMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::AssignedClientIdMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::AssignedClientIdMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::AssignedClientIdMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::StringCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::AssignedClientIdMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::AssignedClientId field.
    struct AssignedClientIdCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::AssignedClientId field.
        static const char* name()
        {
            return "Assigned Client ID";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::ServerKeepAlive field.
    struct ServerKeepAliveMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ServerKeepAliveMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::ServerKeepAliveMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ServerKeepAliveMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ServerKeepAliveMembers::Value field.
        struct ValueCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::ServerKeepAliveMembers::Value field.
            using ValueType = std::uint16_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ServerKeepAliveMembers::Value field.
            static const char* name()
            {
                return "Value";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::ServerKeepAlive field.
    struct ServerKeepAliveCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ServerKeepAlive field.
        static const char* name()
        {
            return "Server Keep Alive";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::AuthMethod field.
    struct AuthMethodMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::AuthMethodMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::AuthMethodMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::AuthMethodMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::AuthMethodMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::StringCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::AuthMethodMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::AuthMethod field.
    struct AuthMethodCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::AuthMethod field.
        static const char* name()
        {
            return "Authentication Method";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::AuthData field.
    struct AuthDataMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::AuthDataMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::AuthDataMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::AuthDataMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::AuthDataMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::BinDataCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::AuthDataMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::AuthData field.
    struct AuthDataCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::AuthData field.
        static const char* name()
        {
            return "Authentication Data";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::RequestProblemInfo field.
    struct RequestProblemInfoMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::RequestProblemInfoMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::RequestProblemInfoMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::RequestProblemInfoMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::RequestProblemInfoMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::EnableEnumCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::RequestProblemInfoMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::RequestProblemInfo field.
    struct RequestProblemInfoCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::RequestProblemInfo field.
        static const char* name()
        {
            return "Request Problem Information";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::WillDelayInterval field.
    struct WillDelayIntervalMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::WillDelayIntervalMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::WillDelayIntervalMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::WillDelayIntervalMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::WillDelayIntervalMembers::Value field.
        struct ValueCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::WillDelayIntervalMembers::Value field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::WillDelayIntervalMembers::Value field.
            static const char* name()
            {
                return "Value";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::WillDelayInterval field.
    struct WillDelayIntervalCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::WillDelayInterval field.
        static const char* name()
        {
            return "Will Delay Interval";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::RequestResponseInfo field.
    struct RequestResponseInfoMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::RequestResponseInfoMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::RequestResponseInfoMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::RequestResponseInfoMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::RequestResponseInfoMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::EnableEnumCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::RequestResponseInfoMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::RequestResponseInfo field.
    struct RequestResponseInfoCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::RequestResponseInfo field.
        static const char* name()
        {
            return "Request Response Information";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::ResponseInfo field.
    struct ResponseInfoMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ResponseInfoMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::ResponseInfoMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ResponseInfoMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ResponseInfoMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::StringCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ResponseInfoMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::ResponseInfo field.
    struct ResponseInfoCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ResponseInfo field.
        static const char* name()
        {
            return "Response Information";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::ServerRef field.
    struct ServerRefMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ServerRefMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::ServerRefMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ServerRefMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ServerRefMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::StringCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ServerRefMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::ServerRef field.
    struct ServerRefCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ServerRef field.
        static const char* name()
        {
            return "Server Reference";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::ReasonStr field.
    struct ReasonStrMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ReasonStrMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::ReasonStrMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ReasonStrMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ReasonStrMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::StringCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ReasonStrMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::ReasonStr field.
    struct ReasonStrCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ReasonStr field.
        static const char* name()
        {
            return "Reason String";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::ReceiveMax field.
    struct ReceiveMaxMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ReceiveMaxMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::ReceiveMaxMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ReceiveMaxMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::ReceiveMaxMembers::Value field.
        struct ValueCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::ReceiveMaxMembers::Value field.
            using ValueType = std::uint16_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ReceiveMaxMembers::Value field.
            static const char* name()
            {
                return "Value";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::ReceiveMax field.
    struct ReceiveMaxCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::ReceiveMax field.
        static const char* name()
        {
            return "Receive Maximum";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::TopicAliasMax field.
    struct TopicAliasMaxMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::TopicAliasMaxMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::TopicAliasMaxMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::TopicAliasMaxMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::TopicAliasMaxMembers::Value field.
        struct ValueCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::TopicAliasMaxMembers::Value field.
            using ValueType = std::uint16_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::TopicAliasMaxMembers::Value field.
            static const char* name()
            {
                return "Value";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::TopicAliasMax field.
    struct TopicAliasMaxCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::TopicAliasMax field.
        static const char* name()
        {
            return "Topic Alias Maximum";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::TopicAlias field.
    struct TopicAliasMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::TopicAliasMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::TopicAliasMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::TopicAliasMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::TopicAliasMembers::Value field.
        struct ValueCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::TopicAliasMembers::Value field.
            using ValueType = std::uint16_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::TopicAliasMembers::Value field.
            static const char* name()
            {
                return "Value";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::TopicAlias field.
    struct TopicAliasCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::TopicAlias field.
        static const char* name()
        {
            return "Topic Alias";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::MaxQos field.
    struct MaxQosMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::MaxQosMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::MaxQosMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::MaxQosMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::MaxQosMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::QosCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::MaxQosMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::MaxQos field.
    struct MaxQosCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::MaxQos field.
        static const char* name()
        {
            return "Maximum QoS";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::RetainAvailable field.
    struct RetainAvailableMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::RetainAvailableMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::RetainAvailableMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::RetainAvailableMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::RetainAvailableMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::EnableEnumCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::RetainAvailableMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::RetainAvailable field.
    struct RetainAvailableCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::RetainAvailable field.
        static const char* name()
        {
            return "Retain Available";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::UserProperty field.
    struct UserPropertyMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::UserPropertyMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::UserPropertyMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::UserPropertyMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Scope for all the common definitions of the member fields of
        ///     @ref cc_mqtt5::field::PropertyMembers::UserPropertyMembers::Value field.
        struct ValueMembersCommon
        {
            /// @brief Common types and functions for
            ///     @ref cc_mqtt5::field::PropertyMembers::UserPropertyMembers::ValueMembers::First field.
            struct FirstCommon : public cc_mqtt5::field::StringCommon
            {
                /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::UserPropertyMembers::ValueMembers::First field.
                static const char* name()
                {
                    return "First";
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_mqtt5::field::PropertyMembers::UserPropertyMembers::ValueMembers::Second field.
            struct SecondCommon : public cc_mqtt5::field::StringCommon
            {
                /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::UserPropertyMembers::ValueMembers::Second field.
                static const char* name()
                {
                    return "Second";
                }
            };
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::UserPropertyMembers::Value field.
        struct ValueCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::UserPropertyMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::UserProperty field.
    struct UserPropertyCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::UserProperty field.
        static const char* name()
        {
            return "User Property";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::MaxPacketSize field.
    struct MaxPacketSizeMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::MaxPacketSizeMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::MaxPacketSizeMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::MaxPacketSizeMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::MaxPacketSizeMembers::Value field.
        struct ValueCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::MaxPacketSizeMembers::Value field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::MaxPacketSizeMembers::Value field.
            static const char* name()
            {
                return "Value";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::MaxPacketSize field.
    struct MaxPacketSizeCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::MaxPacketSize field.
        static const char* name()
        {
            return "Maximum Packet Size";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::WildcardSubAvail field.
    struct WildcardSubAvailMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::WildcardSubAvailMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::WildcardSubAvailMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::WildcardSubAvailMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::WildcardSubAvailMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::EnableEnumCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::WildcardSubAvailMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::WildcardSubAvail field.
    struct WildcardSubAvailCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::WildcardSubAvail field.
        static const char* name()
        {
            return "Wildcard Subscription Available";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::SubIdAvail field.
    struct SubIdAvailMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::SubIdAvailMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::SubIdAvailMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SubIdAvailMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::SubIdAvailMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::EnableEnumCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SubIdAvailMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::SubIdAvail field.
    struct SubIdAvailCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SubIdAvail field.
        static const char* name()
        {
            return "Subscription ID Available";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_mqtt5::field::PropertyMembers::SharedSubAvail field.
    struct SharedSubAvailMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::SharedSubAvailMembers::Id field.
        struct IdCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_mqtt5::field::PropertyMembers::SharedSubAvailMembers::Id field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SharedSubAvailMembers::Id field.
            static const char* name()
            {
                return "Id";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_mqtt5::field::PropertyMembers::SharedSubAvailMembers::Value field.
        struct ValueCommon : public cc_mqtt5::field::EnableEnumCommon
        {
            /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SharedSubAvailMembers::Value field.
            static const char* name()
            {
                return "Value";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_mqtt5::field::PropertyMembers::SharedSubAvail field.
    struct SharedSubAvailCommon
    {
        /// @brief Name of the @ref cc_mqtt5::field::PropertyMembers::SharedSubAvail field.
        static const char* name()
        {
            return "Shared Subscription Available";
        }
    };
};

/// @brief Common types and functions for
///     @ref cc_mqtt5::field::Property field.
struct PropertyCommon
{
    /// @brief Single member name info entry
    using MemberNameInfo = const char*;

    /// @brief Type returned from @ref memberNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using MemberNamesMapInfo = std::pair<const MemberNameInfo*, std::size_t>;

    /// @brief Name of the @ref cc_mqtt5::field::Property field.
    static const char* name()
    {
        return "";
    }

    /// @brief Retrieve name of the member
    static const char* memberName(std::size_t idx)
    {
        auto namesMapInfo = memberNamesMap();
        if (namesMapInfo.second <= idx) {
            return nullptr;
        }

        return namesMapInfo.first[idx];
    }

    /// @brief Retrieve map of members names
    static MemberNamesMapInfo memberNamesMap()
    {
        static const MemberNameInfo Map[] = {
            PropertyMembersCommon::PayloadFormatIndicatorCommon::name(),
            PropertyMembersCommon::MessageExpiryIntervalCommon::name(),
            PropertyMembersCommon::ContentTypeCommon::name(),
            PropertyMembersCommon::ResponseTopicCommon::name(),
            PropertyMembersCommon::CorrelationDataCommon::name(),
            PropertyMembersCommon::SubscriptionIdCommon::name(),
            PropertyMembersCommon::SessionExpiryIntervalCommon::name(),
            PropertyMembersCommon::AssignedClientIdCommon::name(),
            PropertyMembersCommon::ServerKeepAliveCommon::name(),
            PropertyMembersCommon::AuthMethodCommon::name(),
            PropertyMembersCommon::AuthDataCommon::name(),
            PropertyMembersCommon::RequestProblemInfoCommon::name(),
            PropertyMembersCommon::WillDelayIntervalCommon::name(),
            PropertyMembersCommon::RequestResponseInfoCommon::name(),
            PropertyMembersCommon::ResponseInfoCommon::name(),
            PropertyMembersCommon::ServerRefCommon::name(),
            PropertyMembersCommon::ReasonStrCommon::name(),
            PropertyMembersCommon::ReceiveMaxCommon::name(),
            PropertyMembersCommon::TopicAliasMaxCommon::name(),
            PropertyMembersCommon::TopicAliasCommon::name(),
            PropertyMembersCommon::MaxQosCommon::name(),
            PropertyMembersCommon::RetainAvailableCommon::name(),
            PropertyMembersCommon::UserPropertyCommon::name(),
            PropertyMembersCommon::MaxPacketSizeCommon::name(),
            PropertyMembersCommon::WildcardSubAvailCommon::name(),
            PropertyMembersCommon::SubIdAvailCommon::name(),
            PropertyMembersCommon::SharedSubAvailCommon::name()
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

        return std::make_pair(&Map[0], MapSize);
    }
};

} // namespace field

} // namespace cc_mqtt5
